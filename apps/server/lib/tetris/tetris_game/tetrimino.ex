defmodule TetrisGame.Tetrimino do

  defmacro __using__(_) do
    quote do

      # right: x postive axis
      # down: y positve axis
      # 0(spawn state) -> clockwise#1 -> clockwise#2 -> clockwise#3
      Module.put_attribute(__MODULE__, :tetriminos_states, [
        {:I, {
          {{1, 0}, {1, 1}, {1, 2}, {1, 3}},
          {{0, 2}, {1, 2}, {2, 2}, {3, 2}},
          {{2, 0}, {2, 1}, {2, 2}, {2, 3}},
          {{0, 1}, {1, 1}, {2, 1}, {3, 1}}
        }},
        {:J, {
          {{0, 0}, {1, 0}, {1, 1}, {1,2}},
          {{0, 1}, {0, 2}, {1, 1}, {2, 1}},
          {{1, 0}, {1, 1}, {1, 2}, {2, 2}},
          {{0, 1}, {1, 1}, {2, 0}, {2, 1}}
        }},
        {:L, {
          {{0, 2}, {1, 0}, {1, 1}, {1, 2}},
          {{0, 1}, {1, 1}, {2, 1}, {2, 2}},
          {{1, 0}, {1, 1}, {1, 2}, {2, 0}},
          {{0, 0}, {0, 1}, {1, 1}, {2, 1}}
        }},
        {:O, { #same
          {{0, 1}, {0, 2}, {1, 1}, {1, 2}},
          {{0, 1}, {0, 2}, {1, 1}, {1, 2}},
          {{0, 1}, {0, 2}, {1, 1}, {1, 2}},
          {{0, 1}, {0, 2}, {1, 1}, {1, 2}}
        }},
        {:S, {
          {{0, 1}, {0, 2}, {1, 0}, {1, 1}},
          {{0, 1}, {1, 1}, {1, 2}, {2, 2}},
          {{1, 1}, {1, 2}, {2, 0}, {2, 1}},
          {{0, 0}, {1, 0}, {1, 1}, {2, 1}}
        }},
        {:T, {
          {{0, 1}, {1, 0}, {1, 1}, {1, 2}},
          {{0, 1}, {1, 1}, {1, 2}, {2, 1}},
          {{1, 0}, {1, 1}, {1, 2}, {2, 1}},
          {{0, 1}, {1, 0}, {1, 1}, {2, 1}}
        }},
        {:Z, {
          {{0, 0}, {0, 1}, {1, 1}, {1, 2}},
          {{0, 2}, {1, 1}, {1, 2}, {2, 1}},
          {{1, 0}, {1, 1}, {2, 1}, {2, 2}},
          {{0, 1}, {1, 0}, {1, 1}, {2, 0}}
        }}
      ])

      # data from https://tetris.fandom.com/wiki/SRS#Spawn_Orientation_and_Location
      # o isn't applicable orginal data is
      # tuple {from_stage, to_stage, [test1={x, y}, test2, test3, test4, test5]}
      # a convertion of positive x rightwards, positive y upwards based on the basic rotation from :from_stage to :to_stage
      # I converted into {-y, x} to suit tetris99s coordinated system.
      # Enum.map(data, fn {i, j, arr} -> {i, j, Enum.map(arr, fn {x, y} -> {-y, x} end)} end)
      Module.put_attribute(__MODULE__, :wall_kick_rotation_jltsz, [
        {0, 1, [{0, -1}, {-1, -1}, {2, 0}, {2, -1}]},
        {0, 1, [{0, 1}, {1, 1}, {-2, 0}, {-2, 1}]},
        {1, 2, [{0, 1}, {1, 1}, {-2, 0}, {-2, 1}]},
        {2, 1, [{0, -1}, {-1, -1}, {2, 0}, {2, -1}]},
        {2, 3, [{0, 1}, {-1, 1}, {2, 0}, {2, 1}]},
        {3, 2, [{0, -1}, {1, -1}, {-2, 0}, {-2, -1}]},
        {3, 0, [{0, -1}, {1, -1}, {-2, 0}, {-2, -1}]},
        {0, 3, [{0, 1}, {-1, 1}, {2, 0}, {2, 1}]}
      ])
      Module.put_attribute(__MODULE__, :wall_kick_rotation_i, [
        {0, 1, [{0, -2}, {0, 1}, {1, -2}, {-2, 1}]},
        {0, 1, [{0, 2}, {0, -1}, {-1, 2}, {2, -1}]},
        {1, 2, [{0, -1}, {0, 2}, {-2, -1}, {1, 2}]},
        {2, 1, [{0, 1}, {0, -2}, {2, 1}, {-1, -2}]},
        {2, 3, [{0, 2}, {0, -1}, {-1, 2}, {2, -1}]},
        {3, 2, [{0, -2}, {0, 1}, {1, -2}, {-2, 1}]},
        {3, 0, [{0, 1}, {0, -2}, {2, 1}, {-1, -2}]},
        {0, 3, [{0, -1}, {0, 2}, {-2, -1}, {1, 2}]}
      ])
    end
  end

end
